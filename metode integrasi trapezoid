import numpy as np
import time

def f(x):
    return 4 / (1 + x**2)

def trapezoidal_integration(a, b, N):
    h = (b - a) / N
    x = np.linspace(a, b, N+1)
    y = f(x)
    integral = (h / 2) * (y[0] + 2 * np.sum(y[1:N]) + y[N])
    return integral

def calculate_rms_error(estimate, reference):
    return np.sqrt((estimate - reference)**2)

# Testing the function
reference_pi = 3.14159265358979323846
N_values = [10, 100, 1000, 10000]

results = []
for N in N_values:
    start_time = time.time()
    pi_estimate = trapezoidal_integration(0, 1, N)
    end_time = time.time()
    rms_error = calculate_rms_error(pi_estimate, reference_pi)
    exec_time = end_time - start_time
    results.append((N, pi_estimate, rms_error, exec_time))

for result in results:
    print(f"N = {result[0]}: Estimated Pi = {result[1]}, RMS Error = {result[2]}, Execution Time = {result[3]} seconds")
